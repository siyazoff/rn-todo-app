{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _handlers;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { ADD_TODO, REMOVE_TODO, UPDATE_TODO } from \"../types\";\nvar handlers = (_handlers = {}, _defineProperty(_handlers, ADD_TODO, function (state, _ref) {\n  var title = _ref.title;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    todos: [].concat(_toConsumableArray(state.todos), [{\n      id: Date.now().toString(),\n      title: title\n    }])\n  });\n}), _defineProperty(_handlers, REMOVE_TODO, function (state, _ref2) {\n  var id = _ref2.id;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    todos: state.todos.filter(function (todo) {\n      return todo.id !== id;\n    })\n  });\n}), _defineProperty(_handlers, UPDATE_TODO, function (state, _ref3) {\n  var title = _ref3.title,\n      id = _ref3.id;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    todos: state.todos.map(function (todo) {\n      if (todo.id === id) {\n        todo.title = title;\n      }\n\n      return todo;\n    })\n  });\n}), _defineProperty(_handlers, \"DEFAULT\", function DEFAULT(state) {\n  return state;\n}), _handlers);\nexport var todoReducer = function todoReducer(state, action) {\n  var handler = handlers[action.type] || handlers.DEFAULT;\n  return handler(state, action);\n};","map":{"version":3,"sources":["/home/siyazov/Документы/rn-projects/todo-app/src/context/todo/todoReducer.js"],"names":["ADD_TODO","REMOVE_TODO","UPDATE_TODO","handlers","state","title","todos","id","Date","now","toString","filter","todo","map","todoReducer","action","handler","type","DEFAULT"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,WAAhC;AAEA,IAAMC,QAAQ,+CACXH,QADW,EACA,UAACI,KAAD;AAAA,MAAUC,KAAV,QAAUA,KAAV;AAAA,yCACPD,KADO;AAEVE,IAAAA,KAAK,+BACAF,KAAK,CAACE,KADN,IAEH;AACEC,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,GAAWC,QAAX,EADN;AAEEL,MAAAA,KAAK,EAALA;AAFF,KAFG;AAFK;AAAA,CADA,8BAWXJ,WAXW,EAWG,UAACG,KAAD;AAAA,MAAUG,EAAV,SAAUA,EAAV;AAAA,yCACVH,KADU;AAEbE,IAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYK,MAAZ,CAAmB,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACL,EAAL,KAAYA,EAAtB;AAAA,KAAnB;AAFM;AAAA,CAXH,8BAeXL,WAfW,EAeG,UAACE,KAAD;AAAA,MAAUC,KAAV,SAAUA,KAAV;AAAA,MAAiBE,EAAjB,SAAiBA,EAAjB;AAAA,yCACVH,KADU;AAEbE,IAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYO,GAAZ,CAAgB,UAACD,IAAD,EAAU;AAC/B,UAAIA,IAAI,CAACL,EAAL,KAAYA,EAAhB,EAAoB;AAClBK,QAAAA,IAAI,CAACP,KAAL,GAAaA,KAAb;AACD;;AACD,aAAOO,IAAP;AACD,KALM;AAFM;AAAA,CAfH,yCAwBH,iBAACR,KAAD;AAAA,SAAWA,KAAX;AAAA,CAxBG,aAAd;AA2BA,OAAO,IAAMU,WAAW,GAAG,SAAdA,WAAc,CAACV,KAAD,EAAQW,MAAR,EAAmB;AAC5C,MAAMC,OAAO,GAAGb,QAAQ,CAACY,MAAM,CAACE,IAAR,CAAR,IAAyBd,QAAQ,CAACe,OAAlD;AACA,SAAOF,OAAO,CAACZ,KAAD,EAAQW,MAAR,CAAd;AACD,CAHM","sourcesContent":["import { ADD_TODO, REMOVE_TODO, UPDATE_TODO } from \"../types\";\n\nconst handlers = {\n  [ADD_TODO]: (state, { title }) => ({\n    ...state,\n    todos: [\n      ...state.todos,\n      {\n        id: Date.now().toString(),\n        title,\n      },\n    ],\n  }),\n  [REMOVE_TODO]: (state, { id }) => ({\n    ...state,\n    todos: state.todos.filter((todo) => todo.id !== id),\n  }),\n  [UPDATE_TODO]: (state, { title, id }) => ({\n    ...state,\n    todos: state.todos.map((todo) => {\n      if (todo.id === id) {\n        todo.title = title;\n      }\n      return todo;\n    }),\n  }),\n  DEFAULT: (state) => state,\n};\n\nexport const todoReducer = (state, action) => {\n  const handler = handlers[action.type] || handlers.DEFAULT;\n  return handler(state, action);\n};\n"]},"metadata":{},"sourceType":"module"}