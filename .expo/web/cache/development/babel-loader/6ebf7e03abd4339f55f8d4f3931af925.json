{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { AddTodo } from \"../components/AddTodo\";\nimport { Todo } from \"../components/Todo\";\nimport { THEME } from \"../theme\";\nimport { TodoContext } from \"../context/todo/todoContext\";\nimport { ScreenContext } from \"../context/screen/screenContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var MainScreen = function MainScreen() {\n  var _useContext = useContext(TodoContext),\n      addTodo = _useContext.addTodo,\n      todos = _useContext.todos,\n      removeTodo = _useContext.removeTodo;\n\n  var _useContext2 = useContext(ScreenContext),\n      changeScreen = _useContext2.changeScreen;\n\n  var _useState = useState(Dimensions.get(\"window\").width - THEME.PADDING_HORIZONTAL * 2),\n      _useState2 = _slicedToArray(_useState, 2),\n      deviceWidth = _useState2[0],\n      setDeviceWidth = _useState2[1];\n\n  useEffect(function () {\n    var update = function update() {\n      var width = Dimensions.get(\"window\").width - THEME.PADDING_HORIZONTAL * 2;\n      setDeviceWidth(width);\n    };\n\n    var listener = Dimensions.addEventListener(\"change\", update);\n    return function () {\n      listener.remove();\n    };\n  }, []);\n\n  var content = _jsx(View, {\n    style: {\n      width: deviceWidth\n    },\n    children: _jsx(FlatList, {\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      },\n      data: todos,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(Todo, {\n          todo: item,\n          onRemove: removeTodo,\n          onOpen: changeScreen\n        });\n      }\n    })\n  });\n\n  if (todos.length === 0) {\n    content = _jsx(View, {\n      style: styles.imgWrap,\n      children: _jsx(Image, {\n        style: styles.image,\n        source: require(\"../../assets/empty-man.png\")\n      })\n    });\n  }\n\n  return _jsxs(View, {\n    children: [_jsx(AddTodo, {\n      onSubmit: addTodo\n    }), content]\n  });\n};\nvar styles = StyleSheet.create({\n  imgWrap: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 10,\n    height: 300\n  },\n  image: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\"\n  }\n});","map":{"version":3,"sources":["/home/siyazov/Документы/rn-projects/todo-app/src/screens/MainScreen.js"],"names":["React","useState","useEffect","useContext","AddTodo","Todo","THEME","TodoContext","ScreenContext","MainScreen","addTodo","todos","removeTodo","changeScreen","Dimensions","get","width","PADDING_HORIZONTAL","deviceWidth","setDeviceWidth","update","listener","addEventListener","remove","content","item","id","toString","length","styles","imgWrap","image","require","StyleSheet","create","alignItems","justifyContent","padding","height","resizeMode"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;;;;;;AAEA,SAASC,OAAT;AACA,SAASC,IAAT;AACA,SAASC,KAAT;AACA,SAASC,WAAT;AACA,SAASC,aAAT;;;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC9B,oBAAuCN,UAAU,CAACI,WAAD,CAAjD;AAAA,MAAQG,OAAR,eAAQA,OAAR;AAAA,MAAiBC,KAAjB,eAAiBA,KAAjB;AAAA,MAAwBC,UAAxB,eAAwBA,UAAxB;;AACA,qBAAyBT,UAAU,CAACK,aAAD,CAAnC;AAAA,MAAQK,YAAR,gBAAQA,YAAR;;AACA,kBAAsCZ,QAAQ,CAC5Ca,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAAzB,GAAiCV,KAAK,CAACW,kBAAN,GAA2B,CADhB,CAA9C;AAAA;AAAA,MAAOC,WAAP;AAAA,MAAoBC,cAApB;;AAIAjB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMkB,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,UAAMJ,KAAK,GACTF,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAAzB,GAAiCV,KAAK,CAACW,kBAAN,GAA2B,CAD9D;AAEAE,MAAAA,cAAc,CAACH,KAAD,CAAd;AACD,KAJD;;AAMA,QAAMK,QAAQ,GAAGP,UAAU,CAACQ,gBAAX,CAA4B,QAA5B,EAAsCF,MAAtC,CAAjB;AAEA,WAAO,YAAM;AACXC,MAAAA,QAAQ,CAACE,MAAT;AACD,KAFD;AAGD,GAZQ,EAYN,EAZM,CAAT;;AAcA,MAAIC,OAAO,GACT,KAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAER,MAAAA,KAAK,EAAEE;AAAT,KAAb;AAAA,cACE,KAAC,QAAD;AACE,MAAA,YAAY,EAAE,sBAACO,IAAD;AAAA,eAAUA,IAAI,CAACC,EAAL,CAAQC,QAAR,EAAV;AAAA,OADhB;AAEE,MAAA,IAAI,EAAEhB,KAFR;AAGE,MAAA,UAAU,EAAE;AAAA,YAAGc,IAAH,QAAGA,IAAH;AAAA,eACV,KAAC,IAAD;AAAM,UAAA,IAAI,EAAEA,IAAZ;AAAkB,UAAA,QAAQ,EAAEb,UAA5B;AAAwC,UAAA,MAAM,EAAEC;AAAhD,UADU;AAAA;AAHd;AADF,IADF;;AAYA,MAAIF,KAAK,CAACiB,MAAN,KAAiB,CAArB,EAAwB;AACtBJ,IAAAA,OAAO,GACL,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEK,MAAM,CAACC,OAApB;AAAA,gBACE,KAAC,KAAD;AACE,QAAA,KAAK,EAAED,MAAM,CAACE,KADhB;AAEE,QAAA,MAAM,EAAEC,OAAO;AAFjB;AADF,MADF;AAQD;;AAED,SACE,MAAC,IAAD;AAAA,eACE,KAAC,OAAD;AAAS,MAAA,QAAQ,EAAEtB;AAAnB,MADF,EAGGc,OAHH;AAAA,IADF;AAOD,CAnDM;AAqDP,IAAMK,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,OAAO,EAAE;AACPK,IAAAA,UAAU,EAAE,QADL;AAEPC,IAAAA,cAAc,EAAE,QAFT;AAGPC,IAAAA,OAAO,EAAE,EAHF;AAIPC,IAAAA,MAAM,EAAE;AAJD,GADsB;AAO/BP,EAAAA,KAAK,EAAE;AACLf,IAAAA,KAAK,EAAE,MADF;AAELsB,IAAAA,MAAM,EAAE,MAFH;AAGLC,IAAAA,UAAU,EAAE;AAHP;AAPwB,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { StyleSheet, View, FlatList, Image, Dimensions } from \"react-native\";\nimport { AddTodo } from \"../components/AddTodo\";\nimport { Todo } from \"../components/Todo\";\nimport { THEME } from \"../theme\";\nimport { TodoContext } from \"../context/todo/todoContext\";\nimport { ScreenContext } from \"../context/screen/screenContext\";\n\nexport const MainScreen = () => {\n  const { addTodo, todos, removeTodo } = useContext(TodoContext);\n  const { changeScreen } = useContext(ScreenContext);\n  const [deviceWidth, setDeviceWidth] = useState(\n    Dimensions.get(\"window\").width - THEME.PADDING_HORIZONTAL * 2\n  );\n\n  useEffect(() => {\n    const update = () => {\n      const width =\n        Dimensions.get(\"window\").width - THEME.PADDING_HORIZONTAL * 2;\n      setDeviceWidth(width);\n    };\n\n    const listener = Dimensions.addEventListener(\"change\", update);\n\n    return () => {\n      listener.remove();\n    };\n  }, []);\n\n  let content = (\n    <View style={{ width: deviceWidth }}>\n      <FlatList\n        keyExtractor={(item) => item.id.toString()}\n        data={todos}\n        renderItem={({ item }) => (\n          <Todo todo={item} onRemove={removeTodo} onOpen={changeScreen} />\n        )}\n      />\n    </View>\n  );\n\n  if (todos.length === 0) {\n    content = (\n      <View style={styles.imgWrap}>\n        <Image\n          style={styles.image}\n          source={require(\"../../assets/empty-man.png\")}\n        />\n      </View>\n    );\n  }\n\n  return (\n    <View>\n      <AddTodo onSubmit={addTodo} />\n\n      {content}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  imgWrap: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 10,\n    height: 300,\n  },\n  image: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}