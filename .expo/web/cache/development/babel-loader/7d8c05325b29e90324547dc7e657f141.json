{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useReducer } from \"react\";\nimport { ScreenContext } from \"./screenContext\";\nimport { screenReducer } from \"./screenReducer\";\nimport { CHANGE_SCREEN } from \"../types\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var ScreenState = function ScreenState(_ref) {\n  var children = _ref.children;\n\n  var _useReducer = useReducer(screenReducer, null),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var changeScreen = function changeScreen(id) {\n    return dispatch({\n      type: CHANGE_SCREEN,\n      payload: id\n    });\n  };\n\n  return _jsx(ScreenContext.Provider, {\n    value: {\n      changeScreen: changeScreen,\n      todoId: state\n    },\n    children: children\n  });\n};","map":{"version":3,"sources":["/home/siyazov/Документы/rn-projects/todo-app/src/context/screen/ScreenState.js"],"names":["React","useReducer","ScreenContext","screenReducer","CHANGE_SCREEN","ScreenState","children","state","dispatch","changeScreen","id","type","payload","todoId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,aAAT;AACA,SAASC,aAAT;AACA,SAASC,aAAT;;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAC3C,oBAA0BL,UAAU,CAACE,aAAD,EAAgB,IAAhB,CAApC;AAAA;AAAA,MAAOI,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,EAAD;AAAA,WAAQF,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEP,aAAR;AAAuBQ,MAAAA,OAAO,EAAEF;AAAhC,KAAD,CAAhB;AAAA,GAArB;;AAEA,SACE,KAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLD,MAAAA,YAAY,EAAZA,YADK;AAELI,MAAAA,MAAM,EAAEN;AAFH,KADT;AAAA,cAMGD;AANH,IADF;AAUD,CAfM","sourcesContent":["import React, { useReducer } from \"react\";\nimport { ScreenContext } from \"./screenContext\";\nimport { screenReducer } from \"./screenReducer\";\nimport { CHANGE_SCREEN } from \"../types\";\n\nexport const ScreenState = ({ children }) => {\n  const [state, dispatch] = useReducer(screenReducer, null);\n\n  const changeScreen = (id) => dispatch({ type: CHANGE_SCREEN, payload: id });\n\n  return (\n    <ScreenContext.Provider\n      value={{\n        changeScreen,\n        todoId: state,\n      }}\n    >\n      {children}\n    </ScreenContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}